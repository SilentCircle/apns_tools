# OpenSSL intermediate CA configuration file.
# Copy to `/root/ca/intermediate/openssl.cnf`.

oid_section		                = new_oids

[ new_oids ]
# See https://www.apple.com/certificateauthority/pdf/Apple_WWDR_CPS_v1.16.pdf for more information.
# Apple x509v3 extensions
# .1 = Code Signing
appleMacInstallerPkgSigning     = 1.2.840.113635.100.6.1.10 # Mac Installer Package Submission Signing
appleMacAppSoftwareDevSigning   = 1.2.840.113635.100.6.1.12 # ??
applePayPassSigning             = 1.2.840.113635.100.6.1.16 # UTF8String pass.com.example.FakeApp
appleWebsiteSigning             = 1.2.840.113635.100.6.1.17 # UTF8String web.com.example.FakeApp

# .2 = ?
appleWWDRRoot                   = 1.2.840.113635.100.6.2.1  # NULL

# .3 = Apple Push Services
applePushDev                    = 1.2.840.113635.100.6.3.1  # NULL
applePushProd                   = 1.2.840.113635.100.6.3.2  # NULL
applePushBundleId               = 1.2.840.113635.100.6.3.3  # UTF8String com.example.FakeApp
applePushVoIPTopics             = 1.2.840.113635.100.6.3.4  # UTF8String com.example.FakeApp, com.example.FakeApp.voip
applePushVoIP                   = 1.2.840.113635.100.6.3.5  # UTF8String
applePushTopics                 = 1.2.840.113635.100.6.3.6  # cons: SEQUENCE
                                                            # prim:  UTF8STRING        :com.example.FakeApp
                                                            # cons:  SEQUENCE
                                                            # prim:   UTF8STRING       :app
                                                            # prim:   UTF8STRING       :com.example.FakeApp.voip
                                                            # cons:  SEQUENCE
                                                            # prim:   UTF8STRING       :voip
                                                            # prim:   UTF8STRING       :com.example.FakeApp.complication
                                                            # cons:  SEQUENCE
                                                            # prim:   UTF8STRING       :complication
                                                            #
                                                            # This is a plist-like structure:
                                                            #
                                                            # <plist>
                                                            # <string>com.example.FakeApp</string>
                                                            # <string>app</string>
                                                            # <string>com.example.FakeApp.voip</string>
                                                            # <string>voip</string>
                                                            # <string>com.example.FakeApp.complication</string>
                                                            # <string>complication</string>
                                                            # </plist>
                                                            # Namely, name/value pairs of (identifier, type).
appleMerchantIdHash             = 1.2.840.113635.100.6.32   # UTF8String 65 hex chars, sha256 hash?
applePayNotOnlyChina            = 1.2.840.113635.100.6.46   # NULL


[ ca ]
# `man ca`
default_ca                      = CA_default

[ CA_default ]
# Directory and file locations.
dir                             = ./WWDRCA
certs                           = $dir/certs
crl_dir                         = $dir/crl
new_certs_dir                   = $dir/newcerts
database                        = $dir/index.txt
serial                          = $dir/serial
RANDFILE                        = $dir/private/.rand

# The root key and root certificate.
private_key	                    = $dir/private/FakeAppleWWDRCA.key.unencrypted.pem # The private key
certificate	                    = $dir/certs/FakeAppleWWDRCA.cert.pem 	# The CA certificate

# For certificate revocation lists.
crlnumber                       = $dir/crlnumber
crl                             = $dir/crl/intermediate.crl.pem
crl_extensions                  = crl_ext
default_crl_days                = 30

name_opt                        = ca_default
cert_opt                        = ca_default

default_days	                = 3650      	# how long to certify for
default_md	                    = sha1    			# which md to use.
preserve	                    = yes			# keep passed DN ordering
policy                          = policy_strict

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName		                = match
organizationName	            = match
organizationalUnitName	        = supplied
commonName		                = supplied

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName                     = optional
stateOrProvinceName             = optional
localityName                    = optional
organizationName                = optional
organizationalUnitName          = optional
commonName                      = supplied
emailAddress                    = optional

[ req ]
# Options for the `req` tool (`man req`).
prompt                          = no
encrypt_key                     = no
default_bits                    = 2048
distinguished_name              = req_distinguished_name
string_mask                     = utf8only

default_md                      = sha1

# Extension to add when the -x509 option is used.
x509_extensions                 = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = US
organizationName                = Apple Inc.
organizationalUnitName          = Apple Worldwide Developer Relations
commonName                      = Apple Worldwide Developer Relations Certification Authority

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier            = hash
basicConstraints                = critical, CA:true
authorityKeyIdentifier          = keyid:always,issuer
keyUsage                        = critical, digitalSignature, keyCertSign, cRLSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier            = hash
basicConstraints                = critical, CA:TRUE
authorityKeyIdentifier          = keyid:always,issuer
keyUsage                        = critical, digitalSignature, keyCertSign, cRLSign
crlDistributionPoints           = URI:http://crl.apple.com/root.crl
appleWWDRRoot                   = ASN1:NULL

[ v3_istca2g1_intermediate_ca ]
# Extensions for Apple ISTCA2G1
authorityKeyIdentifier          = keyid:always,issuer
subjectKeyIdentifier            = hash
basicConstraints                = critical, CA:TRUE, pathlen:0
keyUsage                        = critical, keyCertSign, cRLSign
crlDistributionPoints           = URI:http://g.symcb.com/crls/gtglobal.crl
authorityInfoAccess             = OCSP;URI:http://g.symcd.com
certificatePolicies             = @istca2g1_polsect

[ v3_push_cert ]
authorityInfoAccess             = OCSP;URI:http://ocsp.apple.com/ocsp03-wwdr01
subjectKeyIdentifier            = hash
basicConstraints                = critical, CA:FALSE
authorityKeyIdentifier          = keyid:always
certificatePolicies             = @push_cert_polsect
crlDistributionPoints           = URI:http://crl.apple.com/wwdrca.crl
keyUsage                        = critical, digitalSignature
extendedKeyUsage                = clientAuth
applePushDev                    = ASN1:NULL # Apple Push Notification service Development
applePushProd                   = ASN1:NULL # Apple Push Notification service Production
applePushBundleId               = ASN1:UTF8String:com.example.FakeApp # Apple custom extension (1.2.840.113635.100.6.3.3)
applePushVoIPTopics             = ASN1:UTF8String:com.example.FakeApp, com.example.FakeApp.voip # Apple custom extension (1.2.840.113635.100.6.3.4)
applePushVoIP                   = ASN1:NULL # Apple custom extension (1.2.840.113635.100.6.3.5)

[ v3_universal_push_cert ]
subjectKeyIdentifier            = hash
basicConstraints                = critical, CA:FALSE
authorityKeyIdentifier          = keyid:always
certificatePolicies             = @push_cert_polsect
crlDistributionPoints           = URI:http://crl.apple.com/wwdrca.crl
keyUsage                        = critical, digitalSignature
extendedKeyUsage                = clientAuth
applePushDev                    = ASN1:NULL # Apple Push Notification service Development
applePushProd                   = ASN1:NULL # Apple Push Notification service Production
applePushTopics                 = ASN1:SEQUENCE:asn1_push_topics

[ asn1_push_topics ]
field1                          = UTF8:com.example.FakeApp
field2                          = SEQUENCE:asn1_push_app_seq
field3                          = UTF8:com.example.FakeApp.voip
field4                          = SEQUENCE:asn1_push_voip_seq
field5                          = UTF8:com.example.FakeApp.complication
field6                          = SEQUENCE:asn1_push_final_seq

[ asn1_push_app_seq ]
field1                          = UTF8:app

[ asn1_push_voip_seq ]
field1                          = UTF8:voip

[ asn1_push_final_seq ]
field1                          = UTF8:complication

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints                = CA:FALSE
nsCertType                      = client, email
nsComment                       = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer
keyUsage                        = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage                = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
authorityInfoAccess             = OCSP;URI:http://ocsp.apple.com/ocsp04-appleistca2g101
subjectKeyIdentifier            = hash
basicConstraints                = critical, CA:FALSE
authorityKeyIdentifier          = keyid:always
certificatePolicies             = @server_polsect
crlDistributionPoints           = URI:http://crl.apple.com/appleistca2g1.crl
keyUsage                        = critical, digitalSignature, keyEncipherment
extendedKeyUsage                = serverAuth, clientAuth
subjectAltName                  = DNS:api.development.push.apple.com, DNS:api.sandbox.push.apple.com DNS:localhost

[ server_polsect ]
policyIdentifier                = 1.2.840.113635.100.5.11.4
userNotice.1                    = @server_notice
CPS.1                           = "http://www.apple.com/certificateauthority/rpa"

[ server_notice ]
explicitText                    = "Reliance on this certificate by any party assumes acceptance of any applicable terms and conditions of use and/or certification practice statements."

[ istca2g1_polsect ]
policyIdentifier                = 2.16.840.1.113733.1.7.54
CPS.1                           = "http://www.apple.com/certificateauthority/rpa"

[push_cert_polsect]
policyIdentifier                = 1.2.840.113635.100.5.1
userNotice.1                    = @push_cert_notice
CPS.1                           = "http://www.apple.com/certificateauthority"

[push_cert_notice]
explicitText                    = "Reliance on this certificate by any party assumes acceptance of the then applicable standard terms and conditions of use, certificate policy and certification practice statements."

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier          = keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints                = CA:FALSE
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer
keyUsage                        = critical, digitalSignature
extendedKeyUsage                = critical, OCSPSigning
